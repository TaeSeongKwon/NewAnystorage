
<% include ./Handler/header %>
		<script src="/socket.io/socket.io.js"></script>
		<script src="/js/socket.io-stream.js"></script>
		<script src="/codebase/webix.js" type="text/javascript"></script>
		<script src="/codebase/filemanager/filemanager.js" type="text/javascript"></script>
		<script src="/js/bootstrap-progressbar.js"></script>
		
		<script src="/js/waitMe.min.js"></script>

		<!--<script type="text/javascript" src="/js/jquery.faloading.js"></script>-->
		<!-- <link type="text/css" rel="stylesheet" href="/css/jquery.faloading.css"/> -->
		<link type="text/css" rel="stylesheet" href="/css/waitMe.min.css">
		<link type="text/css" rel="stylesheet" href="/css/bootstrap-progressbar.css">
		<link rel="stylesheet" type="text/css" href="/codebase/webix.css">
		<link rel="stylesheet" type="text/css" href="/codebase/filemanager/filemanager.css">

		<style>
			html,body{
				height : 100%;
				/*margin-top: 61px !important;*/
			}
			.navbar-fixed-top, .navbar-fixed-bottom{
				position: inherit !important;
				margin-bottom: 0px !important;
			}
			#upload_progress{
				text-align: center;
    			width: 100%;
    			position: fixed;
    			top: calc(100% - 40%);
    			z-index: 9999;
    			display: none;
			}
			#main_progress{
				margin: 0 auto;
    			width: 30%;
			}
			.progressbar-back-text{
				left:0 !important;
			}
			.progressbar-front-text{
				width: 100% !important;
			}
		</style>
		<section id='manager' style='height:calc(100% - 61px)'></section>
		<section id='upload_progress'>
			<div class="progress" id='main_progress'>
		  		<div class="progress-bar" role="progressbar" data-transitiongoal="0"></div>
			</div>
		</section>
		<script type="text/javascript">
            (function() {
                // Defined Communication PACKET Data Structure
                function Packet(device, data) {
                    this.device = device;
                    this.data = data;
                }

                Packet.prototype.data = null;
                Packet.prototype.device = null;

                // Defined FileManager Data Structuire
                function Manager() {
                }

                Manager.prototype.fileTree = null;
                Manager.prototype.setCopyNCut = function (copy, cut) {
                    this._isCopy = copy;
                    this._isCut = cut;
                }
                Manager.prototype.isCopy = function () {
                    return this._isCopy;
                }
                Manager.prototype.isCut = function () {
                    return this._isCut;
                }
//			Manager.prototype.setFilePathList = function(list){
//			    this._filePathList = list;
//			}
//            Manager.prototype.getFilePathList = function(){
//                return this._filePathList;
//            }
                Manager.prototype.setFileNameList = function (list) {
                    this._fileNameList = list;
                }
                Manager.prototype.getFileNameList = function () {
                    return this._fileNameList;
                }
                Manager.prototype.setDestPath = function (path) {
                    this._destPath = path;
                }
                Manager.prototype.getDestPath = function () {
                    return this._destPath;
                }
                Manager.prototype.setSourcePath = function (path) {
                    this._srcPath = path;
                }
                Manager.prototype.getSourcePath = function () {
                    return this._srcPath;
                }
//            Manager.prototype._filePathList = null;
                Manager.prototype._isCopy = false;
                Manager.prototype._isCut = false;
                Manager.prototype._fileNameList = null;
                Manager.prototype._srcPath = null;
                Manager.prototype._destPath = null;

                Manager.prototype._isCoping = false;
                Manager.prototype._isMoving = false;
                Manager.prototype._isRename = false;
                Manager.prototype._isMkdir = false;
                Manager.prototype._isRemoving = false;

                Manager.prototype._uploadPath = null;
                Manager.prototype._uploadFile = null;


                Manager.prototype._totalFileSize = -1;
                Manager.prototype._bin = null;
                Manager.prototype._binIdx = 0;
                Manager.prototype._runFileName = null;

                Manager.prototype.getUploadPath = function () {
                    return this._uploadPath;
                }
                Manager.prototype.getUploadFile = function () {
                    return this._uploadFile;
                }
                Manager.prototype.setUploadPath = function (uploadPath) {
                    this._uploadPath = uploadPath;
                }
                Manager.prototype.setUploadFile = function (uploadFile) {
                    this._uploadFile = uploadFile;
                }

                Manager.prototype.initRunFile = function () {
                    this._totalFileSize = -1;
                    this._bin = null;
                    this._binIdx = 0;
                    this._runFileName = null;
                }

                Manager.prototype.getBinary = function () {
                    return this._bin;
                }
                Manager.prototype.getRunFileName = function () {
                    return this._runFileName;
                }
                Manager.prototype.setRunFileName = function (fileName) {
                    this._runFileName = fileName;
                }
                Manager.prototype.setTotalFileSize = function (fileSize) {
                    this._totalFileSize = fileSize;
                    this._bin = new Uint8Array(fileSize);
                }
                Manager.prototype.setCurrBinIdx = function (idx) {
                    this._binIdx = idx;
                }
                Manager.prototype.getCurrBinIdx = function () {
                    return this._binIdx;
                }
                Manager.prototype.getTotalFileSize = function () {
                    return this._totalFileSize;
                }

                Manager.prototype.setCopyFlag = function (flag) {
                    this._isCoping = flag;
                }
                Manager.prototype.setMoveFlag = function (flag) {
                    this._isMoving = flag;
                }
                Manager.prototype.setMkdirFlag = function (flag) {
                    this._isMkdir = flag;
                }
                Manager.prototype.setRenameFlag = function (flag) {
                    this._isRename = flag;
                }
                Manager.prototype.setRemoveFlag = function (flag) {
                    this._isRemoving = flag;
                }

                Manager.prototype.getCopyFlag = function () {
                    return this._isCoping;
                }
                Manager.prototype.getMoveFlag = function () {
                    return this._isMoving;
                }
                Manager.prototype.getMkdirFlag = function () {
                    return this._isMkdir;
                }
                Manager.prototype.getRenameFlag = function () {
                    return this._isRename;
                }
                Manager.prototype.getRemoveFlag = function () {
                    return this._isRemoving;
                }

                /* ============ User Define Data ============== */
                var mem_id = "<%= userInfo.mem_id %>";
                var device = "<%= device_model %>";
                var host = "<%= server_addr %>";

                var DEFAULT = 1024;
                var CHUNK = DEFAULT * 64;

                var PORT = 2010;

                var CONNECT = "connect";
                var DATA = "data";
                var FILE_TREE = "file_tree";
                var RESPONSE = "response";

                var MK_DIR = "mkdir";
                var RENAME = "rename";
                var COPY = "cp";
                var MOVE = "mv";
                var REMOVE = "rm";
                var GET = "get";
                var PUT = "put";

                var SUCCESS = 200;
                var FAIL = 400;

                var REQ_DTP = "request:new_dtp";
                var RES_DTP = "response:new_dtp";
                var RDY_RECV = "ready:file_recv";
                var OFFLINE = "offline";

                var component = webix.ui({
                    container: "manager",
                    view: "filemanager",
                    id: "files"
                });

                var uploader = component.getUploader();
                var commander = new Manager();
                var socket = io.connect({timeout: (1000 * 60 * 30)});


                // $("body").faLoading('fa-refresh');

//            webix.ready(function(){

//            });


                // Connect to Server


                /* ======= Communication Event Handling ===== */
                socket.on(CONNECT, function () {
                    var packet = new Packet(device, {"type": FILE_TREE});
                    socket.emit(DATA, packet);
                });

                socket.on(DATA, function (data) {
                    console.log("===> Recv(" + DATA + ") : ", data);
                    switch (data["type"]) {
                        case FILE_TREE :
                            var tree = data["data"];
                            component.parse(tree);
                            break;
                        case RESPONSE :
//                            var innerData = data["data"];
                            responseHandler(data);
                            break;
                        case OFFLINE :
                            alert(data["statusText"]);
                            location.href="/";
                            break;
                    }
                });
                /* ======= End Communication Event Handling ======= */
                function responseHandler(data) {
                    switch (data["to"]) {
                        case MK_DIR :
                            if (commander.getMkdirFlag()) {
                                if (data["code"] === SUCCESS) {

                                } else {
                                    alert("폴더를 생성하는데 실패했습니다");
                                }
                                component.hideProgress();
                                commander.setMkdirFlag(false);
                            }
                            break;
                        case MOVE :
                            if (commander.getMoveFlag()) {
                                if (data["code"] === SUCCESS) {

                                } else {
                                    alert("파일을 이동하는데 실패했습니다");
                                }
                                component.hideProgress();
                                commander.setMoveFlag(false);
                            }
                            break;
                        case COPY :
                            if (commander.getCopyFlag()) {
                                if (data["code"] === SUCCESS) {

                                } else {
                                    alert("복사에 실패했습니다");
                                }
                                component.hideProgress();
                                commander.setCopyFlag(false);
                            }
                            break;
                        case REMOVE :
                            if (commander.getRemoveFlag()) {
                                if (data["code"] === SUCCESS) {

                                } else {
                                    alert("파일삭제에 실패했습니다");
                                }
                                component.hideProgress();
                                commander.setRemoveFlag(false);
                            }
                            break;
                        case RENAME :
                            if (commander.getRenameFlag()) {
                                if (data["code"] === SUCCESS) {

                                } else {
                                    alert("이름 변경에 실패했습니다");
                                }
                                component.hideProgress();
                                commander.setRenameFlag(false);
                            }
                            break;
                    }
                }

                function fileDownload() {
                    var bin = commander.getBinary();
                    var fileName = commander.getRunFileName();
                    var a = document.createElement("a");
                    document.body.appendChild(a);
                    a.style = "display: none";
                    var blob = new Blob([bin], {type: "octet/stream"});
                    var url = window.URL.createObjectURL(blob);
                    a.href = url;
                    a.download = fileName;
                    a.click();
                    window.URL.revokeObjectURL(url);
                }

                /* ======= File Manager Event Handling ======== */

                uploader.attachEvent("onAfterFileAdd", function (item, response) {
                    // 파일 업로드 이벤트 : 업로드 하고자 하는 파일을 선택 하고 났을때 발생한다
                    var path = component.getPath(item["id"]);
                    var filePath = getRealPath(1, path.length - 1, path);
                    var roomKey = mem_id + "_" + device + "_" + new Date().getTime();

                    commander.setUploadFile(item["file"]);
                    commander.setUploadPath(filePath);

                    console.log("FILE PATH : ", filePath);
                    console.log("item : ", item);
                    var data = {
                        "type": PUT,
                        "name": item["name"],
                        "path": filePath,
                        "size": item["size"],
                        "key": roomKey
                    };
                    var packet = new Packet(device, data);
                    var dtpSocket = io.connect(host + ":" + PORT);
                    dtpSocket.on(CONNECT, function () {
                        console.log("==================== UPLOAD DTP CONNECT ! =======================");
                        dtpSocket.emit(REQ_DTP, {"key": roomKey});

                        dtpSocket.on(RES_DTP, function (data) {
                            console.log(RES_DTP, data);
                            if (data["code"] === SUCCESS) {
                                socket.emit(DATA, packet);
                            }
                        });

                        dtpSocket.on("msg", function (packet) {
                            console.log("msg", packet);
                            if (packet["type"] === RDY_RECV) {
                                uploadFile(dtpSocket);
                            }
                        });

                        dtpSocket.on("disconnect", function () {
                            console.log("====>> DTP DISCONNECT");
                        });
                    });


                });
                function uploadFile(dtpSocket) {
                    var file = commander.getUploadFile();
                    var fileReader = new FileReader();
                    fileReader.onload = function (e) {
                        var buff = e.target.result;
                        console.log("LOAD FILE BIN : ", buff);
                        var bin = new Int8Array(buff);
                        var idx = 0;
                        for (var start = idx; start < bin.length; start += CHUNK) {
                            var end = (start + CHUNK > bin.length) ? bin.length : (start + CHUNK);
                            var chunk = buff.slice(start, start + CHUNK);
                            dtpSocket.emit("bin", chunk);
                            console.log("==>> BINARAY TRANSFER ( " + start + " ~ " + end + " ) : ", chunk);
                        }
                        dtpSocket.close();
                    }
                    fileReader.readAsArrayBuffer(file);
                }

                /**
                 * @command complete1
                 */
                component.attachEvent("onAfterCreateFolder", function (id) {
                    // 폴더 생성이 되고 났을때 호출되는 이벤트를 핸들링한다
                    console.log(">> EVENT CALL : onAfterCreateFolder");
                    var path = component.getPath(id);
                    var mkDirPath = getRealPath(1, path.length, path);

                    console.log("create folder path : ", mkDirPath);

                    // TODO 조금있다가 풀어준다
                    component.showProgress();
                    var packet = new Packet(device, {"type": MK_DIR, "data": mkDirPath});
                    component.getMenu().hide();
                    commander.setMkdirFlag(true);
                    // 메시지를 송신한다
                    socket.emit(DATA, packet);
                    return false;
                });
                /**
                 * @command MK_DIR data format
                 *
                 *  request format
                 {
                     "type"  :   "mkdir",
                     "data"  :   "폴더를 생성할 경로가 적혀있다"
                 }

                 response format
                 {
                     "type" : "data",
                     "data" : {
                         "type" :
                     }
                 }
                 * */

                /**
                 * @command complete2
                 */
                component.attachEvent('onBeforeEditStop', function (id, state, view) {
                    // 파일 또는 디렉토리의 이름이 변경을 완료 했을때 발생하는 이벤트
                    console.log(">> EVENT CALL : onBeforeEditStop");
                    var path = component.getPath(id);
                    var newPath = getRealPath(1, path.length - 1, path);
                    var oldPath = getRealPath(1, path.length - 1, path);

                    newPath += state.value;
                    oldPath += state.old;
                    console.log("old Path : ", oldPath);
                    console.log("new Path : ", newPath);

                    // TODO 조금있다가 풀어줍니다
                    component.showProgress();
                    var packet = new Packet(device, {
                        "type": RENAME,
                        "data": {
                            "originName": oldPath,
                            "newName": newPath
                        }
                    });
                    commander.setRenameFlag(true);
                    // 메시지를 송신한다.
                    socket.emit(DATA, packet);
                });

                /**
                 * @command complete3
                 */
                component.attachEvent("onBeforeMarkCopy", function (item_ids) {
                    // context 메뉴에서 선택한 파일또는 디렉토리를 복사히기를 선택했을 때 발생하는 이벤트
                    console.log(">> EVENT CALL : onBeforeMarkCopy");
                    var obj = getFilePathList(item_ids);

                    commander.setCopyNCut(true, false);
//					commander.setFilePathList(obj["fileList"]);
                    commander.setFileNameList(obj["fileNameList"]);
                    commander.setSourcePath(obj["srcFilePath"]);

                    console.log("isCopy : ", commander.isCopy());
                    console.log("isCut : ", commander.isCut());
                    console.log("src path : ", commander.getSourcePath());
                    console.log("file name list : ", commander.getFileNameList());


                });
                /**
                 * @command complete4
                 */
                component.attachEvent("onBeforeMarkCut", function (item_ids) {
                    // 선택한 파일 또는 디렉토리의 context메뉴에서 잘라내기를 선택했을 때 발생하는 이벤트
                    console.log(">> EVENT CALL : onBeforeMarkCut");
                    var obj = getFilePathList(item_ids);

                    commander.setCopyNCut(false, true);
//                    commander.setFilePathList(obj["fileList"]);
                    commander.setFileNameList(obj["fileNameList"]);
                    commander.setSourcePath(obj["srcFilePath"]);

                    console.log("isCopy : ", commander.isCopy());
                    console.log("isCut : ", commander.isCut());
                    console.log("src path : ", commander.getSourcePath());
                    console.log("file name list : ", commander.getFileNameList());


                });


                /**
                 * @command complete5
                 */
                component.attachEvent("onBeforePasteFile", function (item) {
                    // 복사 또는 잘라내기를 통하여 붙여넣기를 했을 경우 발생하는 이벤트
                    console.log(">> EVENT CALL : onBeforePasteFile");

                    var list = null;

                    if (typeof item === "string") list = component.getPath(item);
                    else list = component.getPath(item[0]);

                    var destPath = getRealPath(1, list.length, list);
                    var srcPath = commander.getSourcePath();
                    var fileNameList = commander.getFileNameList();

                    console.log("src path : ", srcPath);
                    console.log("dest path : ", destPath);

                    if (srcPath === destPath) {
                        alert("같은 곳에는 붙여 넣을 수 없습니다!");
                    } else {
                        var srcFiles = [];
                        var destFiles = [];
                        var isCopy = commander.isCopy();
                        var isCut = commander.isCut();
                        for (var idx = 0; idx < fileNameList.length; idx++) {
                            var fileName = fileNameList[idx];
                            srcFiles.push(srcPath + fileName);
                            destFiles.push(destPath + fileName);
                        }
                        var data = {
                            "srcFiles": srcFiles,
                            "destFiles": destFiles
                        };
                        var packet = null;

                        // 복사를 했을 경우
                        if (!isCut && isCopy) {
                            console.log("Copy Paste");
                            component.showProgress();
                            packet = new Packet(device, {"type": COPY, "data": data});
                            commander.setCopyFlag(true);
                            socket.emit(DATA, packet);
                            // 잘라내기를 했을경우
                        } else if (isCut && !isCopy) {
                            component.showProgress();
                            console.log("Cut Paste");
                            packet = new Packet(device, {"type": MOVE, "data": data});
                            commander.setMoveFlag(true);
                            socket.emit(DATA, packet);
                        }
                    }

                });

                /**
                 * @command complete6
                 */
                component.attachEvent("onBeforeDeleteFile", function (items) {
                    // 파일 또는 디렉토리를 삭제했을 때 발생하는 이벤트
                    console.log(">> EVENT CALL : onFolderSelect");
                    var obj = getFilePathList(items);
                    var path = obj["srcFilePath"];
                    var fileNames = obj["fileNameList"];
                    var rmFileList = [];
                    for (var idx = 0; idx < fileNames.length; idx++) {
                        rmFileList.push(path + fileNames[idx]);
                    }
                    component.getMenu().hide();
                    if (confirm(rmFileList.length + "개 파일을 정말 삭제하시겠습니까?")) {
                        console.log("list : ", rmFileList);
                        component.showProgress();
                        // 파일 삭제 패킷 작성뒤 송신한다.
                        commander.setRemoveFlag(true);
                        var packet = new Packet(device, {"type": REMOVE, "data": rmFileList});
                        socket.emit(DATA, packet);

                    }
                    return false;
                });

                component.attachEvent("onAfterRun", function (id) {
                    // 파일을 실행 하고자 할때 발생하는 이벤트이며 이 때는 다운로드를 실시한다.
                    console.log(">> EVENT CALL : onAfterRun");
                    var path = component.getPath(id);
                    var filePath = getRealPath(1, path.length - 1, path);
                    var fileName = component.getItem(path[path.length - 1]).value;
                    filePath += fileName;
                    var fileSize = component.getItem(path[path.length - 1]).size;
                    console.log("===> run file path : ", filePath);
                    console.log("===> run file size : ", fileSize);
                    commander.initRunFile();
                    commander.setRunFileName(fileName);
                    commander.setTotalFileSize(fileSize);

                    console.log("file Name : ", commander.getRunFileName());
                    var roomKey = mem_id + "_" + device + "_" + new Date().getTime();

                    var packet = new Packet(device, {
                        "type": GET,
                        "data": filePath,
                        "key": roomKey
                    });
                    //  socket.emit(DATA, packet);

                    var dtpSocket = io.connect(host + ":" + PORT);
                    dtpSocket.on(CONNECT, function () {
                        console.log("==================== DOWNLOAD DTP CONNECT ! =======================");
                        dtpSocket.emit(REQ_DTP, {"key": roomKey});

                        dtpSocket.on(RES_DTP, function (data) {
                            console.log(RES_DTP, data);
                            if (data["code"] === SUCCESS) {
                                socket.emit(DATA, packet);
                            }
                        });
                        dtpSocket.on("bin", function (data) {
//                            console.log("======>> RECV BINARY DATA : ", data);
                            var arr = new Uint8Array(data);
                            var bin = commander.getBinary();
                            var binIdx = commander.getCurrBinIdx();
                            for (var idx = 0; idx < arr.length; idx++) {
                                bin[binIdx++] = arr[idx];
                            }
                            commander.setCurrBinIdx(binIdx);
                            if (binIdx === commander.getTotalFileSize()) {
                                fileDownload();
                                dtpSocket.close();
                            }
                        });
                        dtpSocket.on("disconnect", function () {
                            console.log("====>> DTP DISCONNECT");
                        });

                    });


//					var reqData = {
//						filePath : getFilePath,
//						fileName : name
//					}
                });


                function getRealPath(start, length, list) {
                    var path = "/";
                    for (var idx = start; idx < length; idx++)
                        path += (component.getItem(list[idx]).value + "/");
                    return path;
                }

                function getFilePathList(items) {
                    var list = [];
                    var fileNameList = [];
//                    var fileList = [];

                    // 파일이 하나인가 다수인가?
                    if (typeof(items) === "string") list.push(items);
                    else list = items;

                    var path = "/";
                    var itemPaths = component.getPath(list[0]);
                    for (var idx = 1; idx < itemPaths.length - 1; idx++) {
                        path += (component.getItem(itemPaths[idx]).value + "/");
                    }

                    // 파일이 여러개 일수도 있으므로 중첩 반복문을 쓴다
                    for (var row = 0; row < list.length; row++) {
                        // 파일 목록의 하나의 요소를 가져온다.
                        itemPaths = component.getPath(list[row]);
                        // 파일경로 및 최종 파일명을 추가한다
                        var fileName = component.getItem(itemPaths[itemPaths.length - 1]).value;
                        fileNameList.push(fileName);
                    }
                    return {
                        "fileNameList": fileNameList,
                        "srcFilePath": path
                    };
                }

                /* ======= End Manager Event Handling ======== */
                var isCopy;
                var isCut;

                function updateProgressBar(num) {
                    progress_bar.attr("data-transitiongoal", num).progressbar({display_text: 'center'});
                }
            })();
		
		</script>
	</body>
</html>